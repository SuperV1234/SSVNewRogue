cmake_minimum_required(VERSION 2.8)
project(SSVNewRogue)

set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type." FORCE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -W -pedantic" CACHE STRING "" FORCE)
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVUtils/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVUtilsJson/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVStart/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVEntitySystem/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVSCollision/cmake/Modules/")

set(SPARSEHASH_INCLUDE_DIR "" CACHE STRING "google::sparsehash include directory")

find_package(JsonCpp REQUIRED)
if(JSONCPP_FOUND)
	include_directories(${JSONCPP_INCLUDE_DIR})
	message("\nJsonCpp found and included\n")
else()
	set(JSONCPP_ROOT "" CACHE PATH "JsonCpp top-level directory")
	message("\n-> JsonCpp directory not found. Set SSVUTILS_ROOT to SSVUtils' top-level path (containing both \"include\" and \"lib\" directories).")
endif()

set(SFML_STATIC_LIBRARIES FALSE CACHE BOOL "Look for static SFML libraries.")

find_package(SFML 2 COMPONENTS audio graphics window system network)
if(SFML_FOUND)
	include_directories(${SFML_INCLUDE_DIR})
	message("\nSFML found and included\n")
else()
	set(SFML_INCLUDE_DIR "" CACHE STRING "SFML2 include directory")
	set(SFML_SYSTEM_LIBRARY "" CACHE STRING "SFML2 System library file")
	set(SFML_WINDOW_LIBRARY "" CACHE STRING "SFML2 Window library file")
	set(SFML_GRAPHICS_LIBRARY "" CACHE STRING "SFML2 Graphics library file")
	set(SFML_NETWORK_LIBRARY "" CACHE STRING "SFML2 Network library file")
	set(SFML_AUDIO_LIBRARY "" CACHE STRING "SFML2 Audio library file")
	message("\n-> SFML directory not found. Set include and libraries manually.")
endif()

find_package(SSVUtils REQUIRED)
if(SSVUTILS_FOUND)
	include_directories(${SSVUTILS_INCLUDE_DIR})
	message("\nSSVUtils found and included\n")
else()
	set(SSVUTILS_ROOT "" CACHE PATH "SSVUtils top-level directory")
	message("\n-> SSVUtils directory not found. Set SSVUTILS_ROOT to SSVUtils' top-level path (containing both \"include\" and \"lib\" directories).")
endif()

find_package(SSVUtilsJson REQUIRED)
if(SSVUTILSJSON_FOUND)
	include_directories(${SSVUTILSJSON_INCLUDE_DIR})
	message("\nSSVUtilsJson found and included\n")
else()
	set(SSVUTILSJSON_ROOT "" CACHE PATH "SSVUtils top-level directory")
	message("\n-> SSVUtilsJson directory not found. Set SSVUTILSJSON_ROOT to SSVUtilsJson' top-level path (containing both \"include\" and \"lib\" directories).")
endif()

find_package(SSVStart REQUIRED)
if(SSVSTART_FOUND)
	include_directories(${SSVSTART_INCLUDE_DIR})
	message("\nSSVStart found and included\n")
else()
	set(SSVSTART_ROOT "" CACHE PATH "SSVStart top-level directory")
	message("\n-> SSVStart directory not found. Set SSVSTART_ROOT to SSVStart's top-level path (containing both \"include\" and \"lib\" directories).")
endif()

find_package(SSVEntitySystem REQUIRED)
if(SSVENTITYSYSTEM_FOUND)
	include_directories(${SSVENTITYSYSTEM_INCLUDE_DIR})
	message("\nSSVEntitySystem found and included\n")
else()
	set(SSVENTITYSYSTEM_ROOT "" CACHE PATH "SSVEntitySystem top-level directory")
	message("\n-> SSVEntitySystem directory not found. Set SSVENTITYSYSTEM_ROOT to SSVEntitySystem's top-level path (containing both \"include\" and \"lib\" directories).")
endif()

find_package(SSVSCollision REQUIRED)
if(SSVSCOLLISION_FOUND)
	include_directories(${SSVSCOLLISION_INCLUDE_DIR})
	message("\nSSVSCollision found and included\n")
else()
	set(SSVSCOLLISION_ROOT "" CACHE PATH "SSVStart top-level directory")
	message("\n-> SSVSCollision directory not found. Set SSVSCOLLISION_ROOT to SSVSCollision's top-level path (containing both \"include\" and \"lib\" directories).")
endif()

file(GLOB SRC_LIST "./src/*.cpp" "./src/*.h" "./src/Core/*.cpp" "./src/Core/*.h" "./src/Components/*.cpp" "./src/Components/*.h" "./src/Utils/*.cpp" "./src/Utils/*.h")

include_directories("./src/")
include_directories("./src/Core/")
include_directories("./src/Components/")
include_directories("./src/Utils/")
include_directories(${SPARSEHASH_INCLUDE_DIR})
add_executable(${PROJECT_NAME} ${SRC_LIST})
target_link_libraries(SSVNewRogue ${JSONCPP_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_AUDIO_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_GRAPHICS_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_WINDOW_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_SYSTEM_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_NETWORK_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVUTILS_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVUTILSJSON_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVSTART_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVENTITYSYSTEM_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVSCOLLISION_LIBRARY})
