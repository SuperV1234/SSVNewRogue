cmake_minimum_required(VERSION 2.8)

set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type.")
project(SSVNewRogue)

set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -W -pedantic" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "-fno-omit-frame-pointer -g3 -gdwarf-2 -O3" CACHE STRING "" FORCE)
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVUtils/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVUtilsJson/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVStart/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVEntitySystem/cmake/Modules/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/../SSVSCollision/cmake/Modules/")

set(SPARSEHASH_INCLUDE_DIR "" CACHE STRING "google::sparsehash include directory")

find_package(JsonCpp REQUIRED)

set(SFML_STATIC_LIBRARIES FALSE CACHE BOOL "Look for static SFML libraries.")
find_package(SFML 2 COMPONENTS audio graphics window system network)
if(NOT SFML_FOUND)
	set(SFML_INCLUDE_DIR "" CACHE STRING "SFML2 include directory")
	set(SFML_SYSTEM_LIBRARY "" CACHE STRING "SFML2 System library file")
	set(SFML_WINDOW_LIBRARY "" CACHE STRING "SFML2 Window library file")
	set(SFML_GRAPHICS_LIBRARY "" CACHE STRING "SFML2 Graphics library file")
	set(SFML_NETWORK_LIBRARY "" CACHE STRING "SFML2 Network library file")
	set(SFML_AUDIO_LIBRARY "" CACHE STRING "SFML2 Audio library file")
	message("\n-> SFML directory not found. Set include and libraries manually.")
endif()

find_package(SSVUtils REQUIRED)
find_package(SSVUtilsJson REQUIRED)
find_package(SSVStart REQUIRED)
find_package(SSVEntitySystem REQUIRED)
find_package(SSVSCollision REQUIRED)

file(GLOB SRC_LIST "./src/*.cpp" "./src/*.h" "./src/Core/*.cpp" "./src/Core/*.h" "./src/Components/*.cpp" "./src/Components/*.h" "./src/Utils/*.cpp" "./src/Utils/*.h")

include_directories("./src/")
include_directories(${SPARSEHASH_INCLUDE_DIR})
include_directories(${JSONCPP_INCLUDE_DIR})
include_directories(${SFML_INCLUDE_DIR})
include_directories(${SSVUTILS_INCLUDE_DIR})
include_directories(${SSVUTILSJSON_INCLUDE_DIR})
include_directories(${SSVSTART_INCLUDE_DIR})
include_directories(${SSVENTITYSYSTEM_INCLUDE_DIR})
include_directories(${SSVSCOLLISION_INCLUDE_DIR})
add_executable(${PROJECT_NAME} ${SRC_LIST})
target_link_libraries(SSVNewRogue ${JSONCPP_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_AUDIO_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_GRAPHICS_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_WINDOW_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_SYSTEM_LIBRARY})
target_link_libraries(SSVNewRogue ${SFML_NETWORK_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVUTILS_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVUTILSJSON_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVSTART_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVENTITYSYSTEM_LIBRARY})
target_link_libraries(SSVNewRogue ${SSVSCOLLISION_LIBRARY})
